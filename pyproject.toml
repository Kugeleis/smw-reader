[project]
name = "smw-reader"
version = "0.1.0"
description = "A modular Python client library for accessing Semantic MediaWiki (SMW) API endpoints"
readme = "README.md"
authors = [
    { name = "Kugeleis ", email = "richard.springer@infineon.com" },
]
maintainers = [
    { name = "Kugeleis ", email = "richard.springer@infineon.com" },
]
license = { text = "MIT" }
keywords = ["semantic-mediawiki", "smw", "mediawiki", "api-client", "wiki"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Wiki",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = []

# Optional dependencies for different HTTP clients
[project.optional-dependencies]
aiohttp = ["aiohttp>=3.13.0"]
httpx   = ["httpx>=0.28.1"]
async   = ["aiohttp>=3.13.0", "httpx>=0.28.1", "pytest-asyncio>=0.24.0"]

# URLs section for better PyPI presentation
[project.urls]
"Homepage"      = "https://github.com/your-username/smw-reader"
"Repository"    = "https://github.com/your-username/smw-reader"
"Bug Reports"   = "https://github.com/your-username/smw-reader/issues"
"Documentation" = "https://github.com/your-username/smw-reader#readme"
"Changelog"     = "https://github.com/your-username/smw-reader/blob/main/CHANGELOG.md"

# CLI script removed - this is a library package
# [project.scripts]
# smw-reader = "smw_reader:main"

[build-system]
requires      = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "duty>=1.6.3",
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-watch>=4.2.0",
    "mypy>=1.11.0",
    "ruff>=0.6.0",
    "bandit>=1.7.0",
    "pip-audit>=2.7.0",
    "pre-commit>=4.0.0",
    "rich>=14.2.0",
    "bump-my-version>=1.2.4",
]

# Ruff configuration
[tool.ruff]
line-length    = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit security
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

ignore = [
    "S101", # Use of assert detected
    "S310", # urllib.request.urlopen (expected in HTTP client)
    "S603", # subprocess call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["smw_reader"]

# MyPy configuration
[tool.mypy]
python_version              = "3.12"
strict                      = true
warn_return_any             = true
warn_unused_configs         = true
disallow_untyped_defs       = true
disallow_incomplete_defs    = true
check_untyped_defs          = true
disallow_untyped_decorators = true
no_implicit_optional        = true
warn_redundant_casts        = true
warn_unused_ignores         = true
warn_no_return              = true
warn_unreachable            = true

[[tool.mypy.overrides]]
module                = "tests.*"
disallow_untyped_defs = false

[tool.mypy-setup]
ignore_errors = true

# Bump My Version configuration
[tool.bumpversion]
current_version = "0.1.0"
parse           = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize       = ["{major}.{minor}.{patch}"]
search          = "{current_version}"
replace         = "{new_version}"
tag             = true
commit          = true
commit_args     = "--no-verify"

# Files to update when version changes
[[tool.bumpversion.files]]
filename = "src/smw_reader/__init__.py"
search   = "__version__ = \"{current_version}\""
replace  = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search   = "version = \"{current_version}\""
replace  = "version = \"{new_version}\""

# Update CHANGELOG.md with release date
[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = """## [Unreleased]

### Added
### Changed
### Deprecated
### Removed
### Fixed
### Security

## [{new_version}] - {now:%Y-%m-%d}"""
