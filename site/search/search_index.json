{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SMW Reader","text":"<p>A modular Python client library for accessing Semantic MediaWiki (SMW) API endpoints.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Auto-Formatted Printouts: No more manual \"?\" prefixes - just pass plain property names!</li> <li>\ud83c\udfaf Convenience Methods: Purpose-built methods for common query patterns (<code>query_category</code>, <code>query_property_value</code>, etc.)</li> <li>\ud83d\udd04 Full Backward Compatibility: All existing code works unchanged</li> <li>\ud83c\udfd7\ufe0f Modular Design: Following the open/closed principle, easily extensible with new API endpoints</li> <li>\ud83d\udee1\ufe0f Type Safety: Full type hints throughout the codebase</li> <li>\ud83d\udea8 Robust Error Handling: Custom exceptions for different error scenarios</li> <li>\ud83d\udce6 No External Dependencies: Uses only Python standard library for HTTP requests</li> <li>\ud83e\uddea Comprehensive Testing: Full test suite with pytest (59 tests)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># Recommended: Install with uv (fast, modern Python package manager)\nuv pip install smw-reader\n\n# Or with optional HTTP client support\nuv pip install 'smw-reader[aiohttp]'  # For async HTTP with aiohttp\nuv pip install 'smw-reader[httpx]'    # For async HTTP with httpx\nuv pip install 'smw-reader[async]'    # For full async support\n\n# Alternatively, use pip directly\npip install smw-reader\npip install 'smw-reader[aiohttp]'\npip install 'smw-reader[httpx]'\npip install 'smw-reader[async]'\n\n# Development installation\ngit clone &lt;repository-url&gt;\ncd smw-reader\nuv sync\n\n# To add dependencies during development, use:\nuv add &lt;package&gt;\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from smw_reader import SMWClient\nfrom smw_reader.endpoints.ask import AskEndpoint\n\n# Create a client instance\nclient = SMWClient(\"https://your-wiki.org/w/\")\n\n# Register the ask endpoint\nask_endpoint = AskEndpoint(client)\nclient.register_endpoint(ask_endpoint)\n\n# Simple property query with auto-formatted printouts\nresult = ask_endpoint.query_property_value(\n    property_name=\"Category\",\n    value=\"Person\",\n    printouts=[\"Name\", \"Age\"]  # Auto-formatted to [\"?Name\", \"?Age\"]\n)\n\n# Category query with auto-formatted printouts\nresult = ask_endpoint.query_category(\n    category=\"Person\",\n    printouts=[\"Name\", \"Age\", \"Email\"],  # No need for \"?\" prefix!\n    limit=10\n)\nprint(result)\n</code></pre>"},{"location":"#available-endpoints","title":"Available Endpoints","text":""},{"location":"#ask-endpoint","title":"Ask Endpoint","text":"<p>The <code>ask</code> endpoint allows you to execute semantic queries using SMW's query language with enhanced convenience methods.</p>"},{"location":"#enhanced-convenience-methods-recommended","title":"Enhanced Convenience Methods (Recommended)","text":"<pre><code># Query by property value - printouts auto-formatted\nresult = ask_endpoint.query_property_value(\n    property_name=\"License\",\n    value=\"GPL\",\n    printouts=[\"Name\", \"Homepage URL\", \"Description\"]  # Auto-formatted!\n)\n\n# Query by category - printouts auto-formatted\nresult = ask_endpoint.query_category(\n    category=\"Software\",\n    printouts=[\"Name\", \"License\", \"Version\"],  # Auto-formatted!\n    limit=20\n)\n\n# Query by concept - printouts auto-formatted\nresult = ask_endpoint.query_concept(\n    concept=\"Important People\",\n    printouts=[\"Name\", \"Birth date\", \"Occupation\"]  # Auto-formatted!\n)\n</code></pre>"},{"location":"#traditional-methods-required-for-advanced-cases","title":"Traditional Methods (Required for Advanced Cases)","text":"<pre><code># Direct query execution - needed for complex SMW syntax\nresult = ask_endpoint.execute(query=\"[[Category:Person]]|?Name=Full Name|?Birth date=Born\")\n\n# Custom property labels and aliases\nresult = ask_endpoint.ask(\"[[Category:Software]]|?Name=Title|?License=License Type\", limit=5)\n\n# Subqueries and property chains\nresult = ask_endpoint.execute(\n    query=\"[[Category:Person]]|?Works on.Name=Projects|?Lives in.Population=City Size\"\n)\n\n# Complex conditions with OR operations\nresult = ask_endpoint.execute(\n    query=\"[[Category:Software]] OR [[Category:Library]]|?Name|?License\"\n)\n\n# Structured query with multiple conditions (enhanced with auto-formatting)\nresult = ask_endpoint.query_pages(\n    conditions=AskEndpoint.build_conditions([\"Category:Person\", \"Age::&gt;25\"]),\n    printouts=[\"Name\", \"Age\"],  # Now auto-formatted!\n    limit=10,\n    sort=\"Name\",\n    order=\"asc\"\n)\n</code></pre>"},{"location":"#backward-compatibility","title":"Backward Compatibility","text":"<pre><code># Old format still works (fully backward compatible)\nresult = ask_endpoint.query_category(\n    category=\"Software\",\n    printouts=[\"?Name\", \"?License\"]  # Pre-formatted printouts work too\n)\n\n# Mixed formats are supported\nresult = ask_endpoint.query_property_value(\n    property_name=\"Type\",\n    value=\"Application\",\n    printouts=[\"Name\", \"?License\", \"Version\"]  # Mix of formats works!\n)\n</code></pre>"},{"location":"#key-features-enhancements","title":"Key Features &amp; Enhancements","text":""},{"location":"#auto-formatted-printouts","title":"\ud83d\ude80 Auto-Formatted Printouts","text":"<p>One of the major enhancements is automatic printout formatting. You no longer need to manually add \"?\" prefixes to property names:</p> <pre><code># \u2705 NEW: Simple and clean\nresult = ask_endpoint.query_category(\n    category=\"Software\",\n    printouts=[\"Name\", \"License\", \"Homepage URL\"]  # Auto-formatted!\n)\n\n# \u26a0\ufe0f OLD: Required manual formatting\nresult = ask_endpoint.query_category(\n    category=\"Software\",\n    printouts=[\"?Name\", \"?License\", \"?Homepage URL\"]  # Manual \"?\" prefix\n)\n</code></pre>"},{"location":"#convenience-methods","title":"\ud83c\udfaf Convenience Methods","text":"<p>Choose the right method for your use case:</p> Method Use Case Auto-Formatting Advanced SMW Features <code>query_property_value()</code> Simple property-value queries \u2705 Yes \u274c Limited <code>query_category()</code> Basic category queries \u2705 Yes \u274c Limited <code>query_concept()</code> Basic concept queries \u2705 Yes \u274c Limited <code>query_pages()</code> Multi-condition queries with sorting \u2705 Yes (printouts) \u26a0\ufe0f Partial <code>ask()</code> / <code>execute()</code> Advanced SMW syntax &amp; complex queries \u274c No \u2705 Full Support <p>When to use Enhanced Methods (80% of cases): - Simple category/property queries - Standard printouts without aliases - Basic filtering and sorting</p> <p>When to use Traditional Methods (20% of cases): - Custom property labels (<code>?Name=Title</code>) - Subqueries with dot notation (<code>?Works on.Name</code>) - OR operations (<code>[[A]] OR [[B]]</code>) - Parser functions and templates - Advanced output formatting</p>"},{"location":"#full-backward-compatibility","title":"\ud83d\udd04 Full Backward Compatibility","text":"<p>All existing code continues to work unchanged: - Pre-formatted printouts (with \"?\") still work - Helper methods <code>build_conditions()</code> and <code>build_printouts()</code> remain available - All parameter names and method signatures are preserved - Mixed formats are supported in the same call</p>"},{"location":"#when-enhanced-methods-have-limitations","title":"\ud83d\udea7 When Enhanced Methods Have Limitations","text":"<p>The enhanced convenience methods are designed for common, straightforward queries (80% of use cases). For advanced SMW features, use traditional methods:</p> <p>\u274c Enhanced methods cannot handle:</p> <pre><code># Custom property aliases\n\"[[Category:Software]]|?Name=Software Title|?License=License Type\"\n\n# Property chains/subqueries\n\"[[Category:Person]]|?Works on.Name=Projects|?Lives in.Population=City Size\"\n\n# OR operations\n\"[[Category:Software]] OR [[Category:Library]]|?Name\"\n\n# Parser functions\n\"[[Category:Person]]|?{{#if:{{CURRENTUSER}}|Birth date|Born}}=Date\"\n\n# Mathematical/aggregation functions\n\"[[Category:City]]|?#ask:{{#ask:[[Located in::{{FULLPAGENAME}}]]|format=count}}=Districts\"\n</code></pre> <p>\u2705 For these cases, use traditional methods:</p> <pre><code># Full SMW syntax support\nresult = ask_endpoint.execute(query=\"[[Category:Software]]|?Name=Title|?License=Type\")\nresult = ask_endpoint.ask(\"[[A]] OR [[B]]|?Name\", limit=10)\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>The library follows a modular architecture:</p> <ul> <li><code>SMWClient</code>: Main client class that handles HTTP requests and endpoint registration</li> <li><code>APIEndpoint</code>: Abstract base class for API endpoints (open/closed principle)</li> <li><code>HTTPClient</code>: Abstract interface for HTTP clients (dependency injection)</li> <li><code>RequestsHTTPClient</code>: Concrete implementation using urllib</li> </ul>"},{"location":"#real-world-examples","title":"Real-World Examples","text":""},{"location":"#free-software-foundation-directory","title":"Free Software Foundation Directory","text":"<pre><code>from smw_reader import SMWClient\nfrom smw_reader.endpoints.ask import AskEndpoint\n\n# Connect to FSF Directory\nclient = SMWClient(\"https://directory.fsf.org/w/\")\nask_endpoint = AskEndpoint(client)\n\n# Find all GNU software with license info\ngnu_software = ask_endpoint.query_property_value(\n    property_name=\"Is GNU\",\n    value=\"Yes\",\n    printouts=[\"Name\", \"License\", \"Interface\", \"Homepage URL\"],\n    limit=20\n)\n\n# Find featured software\nfeatured = ask_endpoint.query_property_value(\n    property_name=\"Featured date\",\n    value=\"+\",  # SMW syntax for \"any value\"\n    printouts=[\"Name\", \"License\", \"Homepage URL\", \"Full description\"]\n)\n</code></pre>"},{"location":"#mediawiki-with-categories","title":"MediaWiki with Categories","text":"<pre><code># Query pages in a category\narticles = ask_endpoint.query_category(\n    category=\"Computer Science\",\n    printouts=[\"Author\", \"Publication date\", \"Abstract\"],\n    limit=50\n)\n\n# Query with multiple conditions using query_pages\ncomplex_query = ask_endpoint.query_pages(\n    conditions=AskEndpoint.build_conditions([\n        \"Category:Research\",\n        \"Publication year::&gt;2020\"\n    ]),\n    printouts=[\"Title\", \"Authors\", \"DOI\", \"Abstract\"],  # Auto-formatted!\n    limit=25,\n    sort=\"Publication date\",\n    order=\"desc\"\n)\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>The library provides specific exceptions for different error scenarios:</p> <pre><code>from smw_reader.exceptions import (\n    SMWAPIError,           # Base API error\n    SMWConnectionError,    # Network/connection issues\n    SMWServerError,        # Server-side errors\n    SMWValidationError,    # Invalid parameters\n    SMWAuthenticationError # Authentication failures\n)\n\ntry:\n    result = ask.ask(\"[[Category:Test]]\")\nexcept SMWConnectionError:\n    print(\"Network issue\")\nexcept SMWAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project follows the guidelines specified in <code>AGENTS.md</code>.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"CHANGELOG/#security","title":"Security","text":""},{"location":"CHANGELOG/#051-2025-10-18","title":"[0.5.1] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":""},{"location":"CHANGELOG/#changed_1","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_1","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_1","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":""},{"location":"CHANGELOG/#security_1","title":"Security","text":""},{"location":"CHANGELOG/#050-2025-10-18","title":"[0.5.0] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_2","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_2","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":""},{"location":"CHANGELOG/#security_2","title":"Security","text":""},{"location":"CHANGELOG/#042-2025-10-18","title":"[0.4.2] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_3","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_3","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":""},{"location":"CHANGELOG/#security_3","title":"Security","text":""},{"location":"CHANGELOG/#041-2025-10-18","title":"[0.4.1] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":""},{"location":"CHANGELOG/#changed_4","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_4","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_4","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":""},{"location":"CHANGELOG/#security_4","title":"Security","text":""},{"location":"CHANGELOG/#040-2025-10-18","title":"[0.4.0] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":""},{"location":"CHANGELOG/#changed_5","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_5","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_5","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":""},{"location":"CHANGELOG/#security_5","title":"Security","text":""},{"location":"CHANGELOG/#030-2025-10-18","title":"[0.3.0] - 2025-10-18","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":""},{"location":"CHANGELOG/#changed_6","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_6","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_6","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":""},{"location":"CHANGELOG/#security_6","title":"Security","text":""},{"location":"CHANGELOG/#026-2025-10-16","title":"[0.2.6] - 2025-10-16","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":""},{"location":"CHANGELOG/#changed_7","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_7","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_7","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":""},{"location":"CHANGELOG/#security_7","title":"Security","text":""},{"location":"CHANGELOG/#025-2025-10-16","title":"[0.2.5] - 2025-10-16","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":""},{"location":"CHANGELOG/#changed_8","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_8","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_8","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_8","title":"Fixed","text":""},{"location":"CHANGELOG/#security_8","title":"Security","text":""},{"location":"CHANGELOG/#024-2025-10-16","title":"[0.2.4] - 2025-10-16","text":""},{"location":"CHANGELOG/#added_9","title":"Added","text":""},{"location":"CHANGELOG/#changed_9","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_9","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_9","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_9","title":"Fixed","text":""},{"location":"CHANGELOG/#security_9","title":"Security","text":""},{"location":"CHANGELOG/#022-2025-10-16","title":"[0.2.2] - 2025-10-16","text":""},{"location":"CHANGELOG/#added_10","title":"Added","text":""},{"location":"CHANGELOG/#changed_10","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_10","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_10","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_10","title":"Fixed","text":""},{"location":"CHANGELOG/#security_10","title":"Security","text":""},{"location":"CHANGELOG/#021-2025-10-15","title":"[0.2.1] - 2025-10-15","text":""},{"location":"CHANGELOG/#added_11","title":"Added","text":""},{"location":"CHANGELOG/#changed_11","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_11","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_11","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_11","title":"Fixed","text":""},{"location":"CHANGELOG/#security_11","title":"Security","text":""},{"location":"CHANGELOG/#020-2025-10-15","title":"[0.2.0] - 2025-10-15","text":""},{"location":"CHANGELOG/#added_12","title":"Added","text":""},{"location":"CHANGELOG/#changed_12","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_12","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_12","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_12","title":"Fixed","text":""},{"location":"CHANGELOG/#security_12","title":"Security","text":""},{"location":"CHANGELOG/#012-2025-10-15","title":"[0.1.2] - 2025-10-15","text":""},{"location":"CHANGELOG/#added_13","title":"Added","text":""},{"location":"CHANGELOG/#changed_13","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_13","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_13","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_13","title":"Fixed","text":""},{"location":"CHANGELOG/#security_13","title":"Security","text":""},{"location":"CHANGELOG/#011-2025-10-15","title":"[0.1.1] - 2025-10-15","text":""},{"location":"CHANGELOG/#added_14","title":"Added","text":""},{"location":"CHANGELOG/#changed_14","title":"Changed","text":""},{"location":"CHANGELOG/#deprecated_14","title":"Deprecated","text":""},{"location":"CHANGELOG/#removed_14","title":"Removed","text":""},{"location":"CHANGELOG/#fixed_14","title":"Fixed","text":""},{"location":"CHANGELOG/#security_14","title":"Security","text":""},{"location":"CHANGELOG/#added_15","title":"Added","text":"<ul> <li>Initial release of SMW Reader</li> <li>Modular client architecture for Semantic MediaWiki APIs</li> <li>Ask endpoint with convenience methods for common queries</li> <li>Auto-formatted printouts (no manual \"?\" prefixes needed)</li> <li>Full backward compatibility with traditional SMW query syntax</li> <li>Comprehensive type hints throughout codebase</li> <li>Robust error handling with custom exceptions</li> <li>No external dependencies for basic HTTP functionality</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li><code>query_category()</code> - Query pages by category with auto-formatting</li> <li><code>query_property_value()</code> - Query by property-value pairs</li> <li><code>query_concept()</code> - Query by SMW concepts</li> <li><code>query_pages()</code> - Multi-condition queries with sorting</li> <li><code>ask()</code> / <code>execute()</code> - Direct SMW query execution for advanced cases</li> <li>Automatic printout formatting while maintaining full backward compatibility</li> </ul>"},{"location":"CHANGELOG/#010-2025-10-15","title":"[0.1.0] - 2025-10-15","text":""},{"location":"CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Initial development release</li> <li>Core SMW client functionality</li> <li>Ask endpoint implementation</li> <li>Comprehensive test suite (59 tests)</li> <li>Development tooling setup (ruff, mypy, pre-commit)</li> <li>Documentation and examples</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>.. include:: ../../README.md</p>"},{"location":"reference/#smw_reader.APIEndpoint","title":"<code>APIEndpoint</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for SMW API endpoints.</p> <p>This interface allows for easy extension of new API endpoints while maintaining the open/closed principle.</p> Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>class APIEndpoint(ABC):\n    \"\"\"Abstract base class for SMW API endpoints.\n\n    This interface allows for easy extension of new API endpoints\n    while maintaining the open/closed principle.\n    \"\"\"\n\n    def __init__(self, client: SMWClient) -&gt; None:\n        \"\"\"Initialize the endpoint with a client instance.\n\n        Args:\n            client: The SMW client instance for making requests.\n        \"\"\"\n        self._client = client\n\n    @abstractmethod\n    def execute(self, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Execute the API endpoint with given parameters.\n\n        Args:\n            **params: Endpoint-specific parameters.\n\n        Returns:\n            The API response as a dictionary.\n\n        Raises:\n            SMWAPIError: If the API request fails.\n        \"\"\"\n        pass\n\n    @property\n    @abstractmethod\n    def endpoint_name(self) -&gt; str:\n        \"\"\"The name of the API endpoint (e.g., 'ask', 'askargs', 'smwbrowse').\"\"\"\n        pass\n</code></pre>"},{"location":"reference/#smw_reader.APIEndpoint.endpoint_name","title":"<code>endpoint_name</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The name of the API endpoint (e.g., 'ask', 'askargs', 'smwbrowse').</p>"},{"location":"reference/#smw_reader.APIEndpoint.__init__","title":"<code>__init__(client)</code>","text":"<p>Initialize the endpoint with a client instance.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>SMWClient</code> <p>The SMW client instance for making requests.</p> required Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>def __init__(self, client: SMWClient) -&gt; None:\n    \"\"\"Initialize the endpoint with a client instance.\n\n    Args:\n        client: The SMW client instance for making requests.\n    \"\"\"\n    self._client = client\n</code></pre>"},{"location":"reference/#smw_reader.APIEndpoint.execute","title":"<code>execute(**params)</code>  <code>abstractmethod</code>","text":"<p>Execute the API endpoint with given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>**params</code> <code>Any</code> <p>Endpoint-specific parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The API response as a dictionary.</p> <p>Raises:</p> Type Description <code>SMWAPIError</code> <p>If the API request fails.</p> Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>@abstractmethod\ndef execute(self, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Execute the API endpoint with given parameters.\n\n    Args:\n        **params: Endpoint-specific parameters.\n\n    Returns:\n        The API response as a dictionary.\n\n    Raises:\n        SMWAPIError: If the API request fails.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint","title":"<code>AskEndpoint</code>","text":"<p>               Bases: <code>APIEndpoint</code></p> <p>Implementation of the SMW 'ask' API endpoint.</p> <p>The 'ask' endpoint allows executing semantic queries using SMW's query language. This endpoint supports the full semantic query syntax with conditions, printouts, and parameters.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>class AskEndpoint(APIEndpoint):\n    \"\"\"Implementation of the SMW 'ask' API endpoint.\n\n    The 'ask' endpoint allows executing semantic queries using SMW's query language.\n    This endpoint supports the full semantic query syntax with conditions, printouts,\n    and parameters.\n    \"\"\"\n\n    def _format_printouts(self, printouts: list[str] | None) -&gt; list[str] | None:\n        if not printouts:\n            return printouts\n        return [f\"?{p}\" if not p.startswith(\"?\") else p for p in printouts]\n\n    @property\n    def endpoint_name(self) -&gt; str:\n        \"\"\"The name of the API endpoint.\"\"\"\n        return \"ask\"\n\n    def execute(self, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Execute a semantic query using the 'ask' endpoint.\n\n        Args:\n            **params: Query parameters including:\n                - query: The semantic query string\n                - limit: Maximum number of results\n                - offset: Offset for pagination\n                - sort: Sort field\n                - order: Sort order ('asc' or 'desc')\n\n        Returns:\n            The query results as a dictionary.\n\n        Raises:\n            SMWValidationError: If the query is invalid.\n        \"\"\"\n        query = params.get(\"query\")\n        if not query or not isinstance(query, str):\n            raise SMWValidationError(\"Query parameter must be a non-empty string\")\n\n        request_params = {\"query\": query.strip()}\n        for param_name, param_value in params.items():\n            if param_name != \"query\" and param_value is not None:\n                request_params[param_name] = param_value\n\n        return self._client.make_request(\"ask\", request_params)\n\n    def query(self, query: str | QueryBuilder, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Convenience method for executing semantic queries.\n\n        Args:\n            query: The semantic query string or a QueryBuilder instance.\n            **params: Additional query parameters.\n\n        Returns:\n            The query results as a dictionary.\n        \"\"\"\n        return self.execute(query=str(query), **params)\n\n    def ask(self, query: str | QueryBuilder, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Alias for the query method.\"\"\"\n        warnings.warn(\n            \"The 'ask' method is deprecated, use 'query' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.query(query, **params)\n\n    def query_pages(self, conditions: list[str], printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Execute a semantic query using structured parameters.\"\"\"\n        warnings.warn(\"The 'query_pages' method is deprecated.\", DeprecationWarning, stacklevel=2)\n        if not conditions:\n            raise SMWValidationError(\"At least one condition is required\")\n        query_parts = conditions.copy()\n        if printouts:\n            query_parts.extend(printouts)\n        return self.query(\"|\".join(query_parts), **params)\n\n    def query_concept(self, concept: str, printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Query pages belonging to a specific concept.\"\"\"\n        warnings.warn(\"The 'query_concept' method is deprecated.\", DeprecationWarning, stacklevel=2)\n        return self.query_pages([f\"[[Concept:{concept}]]\"], self._format_printouts(printouts), **params)\n\n    def query_category(self, category: str, printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n        \"\"\"Query pages in a specific category.\"\"\"\n        warnings.warn(\n            \"The 'query_category' method is deprecated.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.query_pages([f\"[[Category:{category}]]\"], self._format_printouts(printouts), **params)\n\n    def query_property_value(\n        self,\n        property_name: str,\n        value: Any,\n        operator: str = \"::\",\n        printouts: list[str] | None = None,\n        **params: Any,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Query pages with a specific property value.\"\"\"\n        warnings.warn(\n            \"The 'query_property_value' method is deprecated.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.query_pages(\n            [f\"[[{property_name}{operator}{value}]]\"],\n            self._format_printouts(printouts),\n            **params,\n        )\n\n    def query_dict(\n        self, query_conditions: dict[str, Any], printouts: list[str] | None = None, **params: Any\n    ) -&gt; dict[str, Any]:\n        \"\"\"Execute a semantic query using a dictionary of conditions.\"\"\"\n        warnings.warn(\"The 'query_dict' method is deprecated.\", DeprecationWarning, stacklevel=2)\n        conditions = []\n        if \"categories\" in query_conditions:\n            if not isinstance(query_conditions[\"categories\"], list):\n                raise SMWValidationError(\"'categories' must be a list of strings.\")\n            for category in query_conditions[\"categories\"]:\n                conditions.append(f\"[[Category:{category}]]\")\n        if \"concepts\" in query_conditions:\n            if not isinstance(query_conditions[\"concepts\"], list):\n                raise SMWValidationError(\"'concepts' must be a list of strings.\")\n            for concept in query_conditions[\"concepts\"]:\n                conditions.append(f\"[[Concept:{concept}]]\")\n        if \"properties\" in query_conditions:\n            if not isinstance(query_conditions[\"properties\"], dict):\n                raise SMWValidationError(\"'properties' must be a dictionary.\")\n            for prop, value_or_dict in query_conditions[\"properties\"].items():\n                if isinstance(value_or_dict, dict):\n                    operator = value_or_dict.get(\"operator\", \"::\")\n                    value = value_or_dict.get(\"value\")\n                    if value is None:\n                        raise SMWValidationError(f\"Property '{prop}' dictionary must have a 'value' key.\")\n                    conditions.append(f\"[[{prop}{operator}{value}]]\")\n                else:\n                    conditions.append(f\"[[{prop}::{value_or_dict}]]\")\n        return self.query_pages(conditions, self._format_printouts(printouts), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.endpoint_name","title":"<code>endpoint_name</code>  <code>property</code>","text":"<p>The name of the API endpoint.</p>"},{"location":"reference/#smw_reader.AskEndpoint.ask","title":"<code>ask(query, **params)</code>","text":"<p>Alias for the query method.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def ask(self, query: str | QueryBuilder, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Alias for the query method.\"\"\"\n    warnings.warn(\n        \"The 'ask' method is deprecated, use 'query' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.query(query, **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.execute","title":"<code>execute(**params)</code>","text":"<p>Execute a semantic query using the 'ask' endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>**params</code> <code>Any</code> <p>Query parameters including: - query: The semantic query string - limit: Maximum number of results - offset: Offset for pagination - sort: Sort field - order: Sort order ('asc' or 'desc')</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The query results as a dictionary.</p> <p>Raises:</p> Type Description <code>SMWValidationError</code> <p>If the query is invalid.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def execute(self, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Execute a semantic query using the 'ask' endpoint.\n\n    Args:\n        **params: Query parameters including:\n            - query: The semantic query string\n            - limit: Maximum number of results\n            - offset: Offset for pagination\n            - sort: Sort field\n            - order: Sort order ('asc' or 'desc')\n\n    Returns:\n        The query results as a dictionary.\n\n    Raises:\n        SMWValidationError: If the query is invalid.\n    \"\"\"\n    query = params.get(\"query\")\n    if not query or not isinstance(query, str):\n        raise SMWValidationError(\"Query parameter must be a non-empty string\")\n\n    request_params = {\"query\": query.strip()}\n    for param_name, param_value in params.items():\n        if param_name != \"query\" and param_value is not None:\n            request_params[param_name] = param_value\n\n    return self._client.make_request(\"ask\", request_params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query","title":"<code>query(query, **params)</code>","text":"<p>Convenience method for executing semantic queries.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str | QueryBuilder</code> <p>The semantic query string or a QueryBuilder instance.</p> required <code>**params</code> <code>Any</code> <p>Additional query parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The query results as a dictionary.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query(self, query: str | QueryBuilder, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Convenience method for executing semantic queries.\n\n    Args:\n        query: The semantic query string or a QueryBuilder instance.\n        **params: Additional query parameters.\n\n    Returns:\n        The query results as a dictionary.\n    \"\"\"\n    return self.execute(query=str(query), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query_category","title":"<code>query_category(category, printouts=None, **params)</code>","text":"<p>Query pages in a specific category.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query_category(self, category: str, printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Query pages in a specific category.\"\"\"\n    warnings.warn(\n        \"The 'query_category' method is deprecated.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.query_pages([f\"[[Category:{category}]]\"], self._format_printouts(printouts), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query_concept","title":"<code>query_concept(concept, printouts=None, **params)</code>","text":"<p>Query pages belonging to a specific concept.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query_concept(self, concept: str, printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Query pages belonging to a specific concept.\"\"\"\n    warnings.warn(\"The 'query_concept' method is deprecated.\", DeprecationWarning, stacklevel=2)\n    return self.query_pages([f\"[[Concept:{concept}]]\"], self._format_printouts(printouts), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query_dict","title":"<code>query_dict(query_conditions, printouts=None, **params)</code>","text":"<p>Execute a semantic query using a dictionary of conditions.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query_dict(\n    self, query_conditions: dict[str, Any], printouts: list[str] | None = None, **params: Any\n) -&gt; dict[str, Any]:\n    \"\"\"Execute a semantic query using a dictionary of conditions.\"\"\"\n    warnings.warn(\"The 'query_dict' method is deprecated.\", DeprecationWarning, stacklevel=2)\n    conditions = []\n    if \"categories\" in query_conditions:\n        if not isinstance(query_conditions[\"categories\"], list):\n            raise SMWValidationError(\"'categories' must be a list of strings.\")\n        for category in query_conditions[\"categories\"]:\n            conditions.append(f\"[[Category:{category}]]\")\n    if \"concepts\" in query_conditions:\n        if not isinstance(query_conditions[\"concepts\"], list):\n            raise SMWValidationError(\"'concepts' must be a list of strings.\")\n        for concept in query_conditions[\"concepts\"]:\n            conditions.append(f\"[[Concept:{concept}]]\")\n    if \"properties\" in query_conditions:\n        if not isinstance(query_conditions[\"properties\"], dict):\n            raise SMWValidationError(\"'properties' must be a dictionary.\")\n        for prop, value_or_dict in query_conditions[\"properties\"].items():\n            if isinstance(value_or_dict, dict):\n                operator = value_or_dict.get(\"operator\", \"::\")\n                value = value_or_dict.get(\"value\")\n                if value is None:\n                    raise SMWValidationError(f\"Property '{prop}' dictionary must have a 'value' key.\")\n                conditions.append(f\"[[{prop}{operator}{value}]]\")\n            else:\n                conditions.append(f\"[[{prop}::{value_or_dict}]]\")\n    return self.query_pages(conditions, self._format_printouts(printouts), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query_pages","title":"<code>query_pages(conditions, printouts=None, **params)</code>","text":"<p>Execute a semantic query using structured parameters.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query_pages(self, conditions: list[str], printouts: list[str] | None = None, **params: Any) -&gt; dict[str, Any]:\n    \"\"\"Execute a semantic query using structured parameters.\"\"\"\n    warnings.warn(\"The 'query_pages' method is deprecated.\", DeprecationWarning, stacklevel=2)\n    if not conditions:\n        raise SMWValidationError(\"At least one condition is required\")\n    query_parts = conditions.copy()\n    if printouts:\n        query_parts.extend(printouts)\n    return self.query(\"|\".join(query_parts), **params)\n</code></pre>"},{"location":"reference/#smw_reader.AskEndpoint.query_property_value","title":"<code>query_property_value(property_name, value, operator='::', printouts=None, **params)</code>","text":"<p>Query pages with a specific property value.</p> Source code in <code>src/smw_reader/endpoints/ask.py</code> <pre><code>def query_property_value(\n    self,\n    property_name: str,\n    value: Any,\n    operator: str = \"::\",\n    printouts: list[str] | None = None,\n    **params: Any,\n) -&gt; dict[str, Any]:\n    \"\"\"Query pages with a specific property value.\"\"\"\n    warnings.warn(\n        \"The 'query_property_value' method is deprecated.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.query_pages(\n        [f\"[[{property_name}{operator}{value}]]\"],\n        self._format_printouts(printouts),\n        **params,\n    )\n</code></pre>"},{"location":"reference/#smw_reader.HTTPClient","title":"<code>HTTPClient</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract interface for HTTP clients to enable dependency injection.</p> Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>class HTTPClient(ABC):\n    \"\"\"Abstract interface for HTTP clients to enable dependency injection.\"\"\"\n\n    @abstractmethod\n    def get(self, url: str, params: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"Make a GET request.\n\n        Args:\n            url: The URL to request.\n            params: Query parameters.\n            **kwargs: Additional request parameters.\n\n        Returns:\n            The response data.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def post(self, url: str, data: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"Make a POST request.\n\n        Args:\n            url: The URL to request.\n            data: Request body data.\n            **kwargs: Additional request parameters.\n\n        Returns:\n            The response data.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/#smw_reader.HTTPClient.get","title":"<code>get(url, params=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to request.</p> required <code>params</code> <code>dict[str, Any] | None</code> <p>Query parameters.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The response data.</p> Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>@abstractmethod\ndef get(self, url: str, params: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"Make a GET request.\n\n    Args:\n        url: The URL to request.\n        params: Query parameters.\n        **kwargs: Additional request parameters.\n\n    Returns:\n        The response data.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.HTTPClient.post","title":"<code>post(url, data=None, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to request.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Request body data.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The response data.</p> Source code in <code>src/smw_reader/interfaces.py</code> <pre><code>@abstractmethod\ndef post(self, url: str, data: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"Make a POST request.\n\n    Args:\n        url: The URL to request.\n        data: Request body data.\n        **kwargs: Additional request parameters.\n\n    Returns:\n        The response data.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.RequestsHTTPClient","title":"<code>RequestsHTTPClient</code>","text":"<p>               Bases: <code>HTTPClient</code></p> <p>HTTP client implementation using urllib (no external dependencies).</p> <p>This implementation uses only standard library modules to avoid external dependencies while providing robust HTTP functionality.</p> Source code in <code>src/smw_reader/http_client.py</code> <pre><code>class RequestsHTTPClient(HTTPClient):\n    \"\"\"HTTP client implementation using urllib (no external dependencies).\n\n    This implementation uses only standard library modules to avoid\n    external dependencies while providing robust HTTP functionality.\n    \"\"\"\n\n    def __init__(self, timeout: float = 30.0, user_agent: str = \"SMW-Reader/0.1.0\") -&gt; None:\n        \"\"\"Initialize the HTTP client.\n\n        Args:\n            timeout: Request timeout in seconds.\n            user_agent: User agent string for requests.\n        \"\"\"\n        self.timeout = timeout\n        self.user_agent = user_agent\n\n    def get(self, url: str, params: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"Make a GET request.\n\n        Args:\n            url: The URL to request.\n            params: Query parameters.\n            **kwargs: Additional request parameters.\n\n        Returns:\n            The response data as a dictionary.\n\n        Raises:\n            SMWConnectionError: If the connection fails.\n            SMWServerError: If the server returns an error.\n        \"\"\"\n        if params:\n            # Convert parameters to strings and encode\n            str_params = {k: str(v) for k, v in params.items()}\n            query_string = urllib.parse.urlencode(str_params)\n            url = f\"{url}?{query_string}\"\n\n        return self._make_request(url, method=\"GET\", **kwargs)\n\n    def post(self, url: str, data: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"Make a POST request.\n\n        Args:\n            url: The URL to request.\n            data: Request body data.\n            **kwargs: Additional request parameters.\n\n        Returns:\n            The response data as a dictionary.\n\n        Raises:\n            SMWConnectionError: If the connection fails.\n            SMWServerError: If the server returns an error.\n        \"\"\"\n        return self._make_request(url, method=\"POST\", data=data, **kwargs)\n\n    def _make_request(\n        self,\n        url: str,\n        method: str = \"GET\",\n        data: dict[str, Any] | None = None,\n        **kwargs: Any,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Make an HTTP request.\n\n        Args:\n            url: The URL to request.\n            method: HTTP method.\n            data: Request body data for POST requests.\n            **kwargs: Additional request parameters.\n\n        Returns:\n            The response data as a dictionary.\n\n        Raises:\n            SMWConnectionError: If the connection fails.\n            SMWServerError: If the server returns an error.\n        \"\"\"\n        try:\n            # Prepare request\n            req_data = None\n            if data and method == \"POST\":\n                req_data = urllib.parse.urlencode(data).encode(\"utf-8\")\n\n            request = urllib.request.Request(url, data=req_data, method=method)\n            request.add_header(\"User-Agent\", self.user_agent)\n            request.add_header(\"Accept\", \"application/json\")\n\n            if req_data:\n                request.add_header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\n            # Make request\n            with urllib.request.urlopen(request, timeout=self.timeout) as response:\n                response_text = response.read().decode(\"utf-8\")\n\n                # Try to parse JSON response\n                try:\n                    parsed_json = json.loads(response_text)\n                    if not isinstance(parsed_json, dict):\n                        raise SMWServerError(\"Expected JSON object, got different type\")\n                    return parsed_json\n                except json.JSONDecodeError as e:\n                    raise SMWServerError(f\"Invalid JSON response: {e}\") from e\n\n        except urllib.error.HTTPError as e:\n            error_body = e.read().decode(\"utf-8\") if e.fp else \"No error details\"\n            raise SMWServerError(\n                f\"HTTP {e.code}: {e.reason}. Response: {error_body}\",\n                status_code=e.code,\n                response_data={\"error\": error_body},\n            ) from e\n        except urllib.error.URLError as e:\n            raise SMWConnectionError(f\"Connection error: {e.reason}\") from e\n        except Exception as e:\n            raise SMWConnectionError(f\"Unexpected error: {e}\") from e\n</code></pre>"},{"location":"reference/#smw_reader.RequestsHTTPClient.__init__","title":"<code>__init__(timeout=30.0, user_agent='SMW-Reader/0.1.0')</code>","text":"<p>Initialize the HTTP client.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Request timeout in seconds.</p> <code>30.0</code> <code>user_agent</code> <code>str</code> <p>User agent string for requests.</p> <code>'SMW-Reader/0.1.0'</code> Source code in <code>src/smw_reader/http_client.py</code> <pre><code>def __init__(self, timeout: float = 30.0, user_agent: str = \"SMW-Reader/0.1.0\") -&gt; None:\n    \"\"\"Initialize the HTTP client.\n\n    Args:\n        timeout: Request timeout in seconds.\n        user_agent: User agent string for requests.\n    \"\"\"\n    self.timeout = timeout\n    self.user_agent = user_agent\n</code></pre>"},{"location":"reference/#smw_reader.RequestsHTTPClient.get","title":"<code>get(url, params=None, **kwargs)</code>","text":"<p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to request.</p> required <code>params</code> <code>dict[str, Any] | None</code> <p>Query parameters.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The response data as a dictionary.</p> <p>Raises:</p> Type Description <code>SMWConnectionError</code> <p>If the connection fails.</p> <code>SMWServerError</code> <p>If the server returns an error.</p> Source code in <code>src/smw_reader/http_client.py</code> <pre><code>def get(self, url: str, params: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"Make a GET request.\n\n    Args:\n        url: The URL to request.\n        params: Query parameters.\n        **kwargs: Additional request parameters.\n\n    Returns:\n        The response data as a dictionary.\n\n    Raises:\n        SMWConnectionError: If the connection fails.\n        SMWServerError: If the server returns an error.\n    \"\"\"\n    if params:\n        # Convert parameters to strings and encode\n        str_params = {k: str(v) for k, v in params.items()}\n        query_string = urllib.parse.urlencode(str_params)\n        url = f\"{url}?{query_string}\"\n\n    return self._make_request(url, method=\"GET\", **kwargs)\n</code></pre>"},{"location":"reference/#smw_reader.RequestsHTTPClient.post","title":"<code>post(url, data=None, **kwargs)</code>","text":"<p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to request.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Request body data.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The response data as a dictionary.</p> <p>Raises:</p> Type Description <code>SMWConnectionError</code> <p>If the connection fails.</p> <code>SMWServerError</code> <p>If the server returns an error.</p> Source code in <code>src/smw_reader/http_client.py</code> <pre><code>def post(self, url: str, data: dict[str, Any] | None = None, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"Make a POST request.\n\n    Args:\n        url: The URL to request.\n        data: Request body data.\n        **kwargs: Additional request parameters.\n\n    Returns:\n        The response data as a dictionary.\n\n    Raises:\n        SMWConnectionError: If the connection fails.\n        SMWServerError: If the server returns an error.\n    \"\"\"\n    return self._make_request(url, method=\"POST\", data=data, **kwargs)\n</code></pre>"},{"location":"reference/#smw_reader.SMWAPIError","title":"<code>SMWAPIError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for SMW API errors.</p> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>class SMWAPIError(Exception):\n    \"\"\"Base exception for SMW API errors.\"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        status_code: int | None = None,\n        response_data: dict[str, Any] | None = None,\n    ) -&gt; None:\n        \"\"\"Initialize SMW API error.\n\n        Args:\n            message: Error message.\n            status_code: HTTP status code if available.\n            response_data: Response data if available.\n        \"\"\"\n        super().__init__(message)\n        self.status_code = status_code\n        self.response_data = response_data\n</code></pre>"},{"location":"reference/#smw_reader.SMWAPIError.__init__","title":"<code>__init__(message, status_code=None, response_data=None)</code>","text":"<p>Initialize SMW API error.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> required <code>status_code</code> <code>int | None</code> <p>HTTP status code if available.</p> <code>None</code> <code>response_data</code> <code>dict[str, Any] | None</code> <p>Response data if available.</p> <code>None</code> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>def __init__(\n    self,\n    message: str,\n    status_code: int | None = None,\n    response_data: dict[str, Any] | None = None,\n) -&gt; None:\n    \"\"\"Initialize SMW API error.\n\n    Args:\n        message: Error message.\n        status_code: HTTP status code if available.\n        response_data: Response data if available.\n    \"\"\"\n    super().__init__(message)\n    self.status_code = status_code\n    self.response_data = response_data\n</code></pre>"},{"location":"reference/#smw_reader.SMWAuthenticationError","title":"<code>SMWAuthenticationError</code>","text":"<p>               Bases: <code>SMWAPIError</code></p> <p>Exception raised when authentication fails.</p> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>class SMWAuthenticationError(SMWAPIError):\n    \"\"\"Exception raised when authentication fails.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.SMWClient","title":"<code>SMWClient</code>","text":"<p>Main client for accessing Semantic MediaWiki API.</p> <p>This client provides a modular interface to various SMW API endpoints following dependency injection and open/closed principles.</p> Source code in <code>src/smw_reader/client.py</code> <pre><code>class SMWClient:\n    \"\"\"Main client for accessing Semantic MediaWiki API.\n\n    This client provides a modular interface to various SMW API endpoints\n    following dependency injection and open/closed principles.\n    \"\"\"\n\n    def __init__(\n        self,\n        base_url: str,\n        http_client: HTTPClient | None = None,\n        api_path: str = \"api.php\",\n    ) -&gt; None:\n        \"\"\"Initialize the SMW client.\n\n        Args:\n            base_url: Base URL of the MediaWiki installation (e.g., \"https://example.com/wiki/\").\n            http_client: HTTP client instance. If None, uses default RequestsHTTPClient.\n            api_path: Path to the API endpoint (default: \"api.php\").\n        \"\"\"\n        self.base_url = base_url.rstrip(\"/\") + \"/\"\n        self.api_url = urljoin(self.base_url, api_path)\n        self.http_client = http_client or RequestsHTTPClient()\n        self._endpoints: dict[str, APIEndpoint] = {}\n\n    def register_endpoint(self, endpoint: APIEndpoint) -&gt; None:\n        \"\"\"Register an API endpoint with the client.\n\n        Args:\n            endpoint: The endpoint instance to register.\n        \"\"\"\n        self._endpoints[endpoint.endpoint_name] = endpoint\n\n    def get_endpoint(self, name: str) -&gt; APIEndpoint:\n        \"\"\"Get a registered endpoint by name.\n\n        Args:\n            name: The endpoint name.\n\n        Returns:\n            The endpoint instance.\n\n        Raises:\n            SMWValidationError: If the endpoint is not registered.\n        \"\"\"\n        if name not in self._endpoints:\n            raise SMWValidationError(f\"Endpoint '{name}' is not registered\")\n        return self._endpoints[name]\n\n    def make_request(self, action: str, params: dict[str, Any] | None = None, method: str = \"GET\") -&gt; dict[str, Any]:\n        \"\"\"Make a request to the SMW API.\n\n        Args:\n            action: The API action/module name.\n            params: Additional parameters for the request.\n            method: HTTP method to use.\n\n        Returns:\n            The API response as a dictionary.\n\n        Raises:\n            SMWAPIError: If the API request fails.\n        \"\"\"\n        # Prepare parameters\n        request_params = {\"action\": action, \"format\": \"json\"}\n        if params:\n            request_params.update(params)\n\n        try:\n            if method.upper() == \"GET\":\n                response = self.http_client.get(self.api_url, params=request_params)\n            elif method.upper() == \"POST\":\n                response = self.http_client.post(self.api_url, data=request_params)\n            else:\n                raise SMWValidationError(f\"Unsupported HTTP method: {method}\")\n\n            # Check for API errors\n            if \"error\" in response:\n                error_info = response[\"error\"]\n                raise SMWAPIError(\n                    f\"API Error: {error_info.get('info', 'Unknown error')}\",\n                    response_data=error_info,\n                )\n\n            return response\n\n        except SMWAPIError:\n            # Re-raise SMW API errors as-is\n            raise\n        except Exception as e:\n            # Wrap other exceptions\n            raise SMWAPIError(f\"Request failed: {e}\") from e\n</code></pre>"},{"location":"reference/#smw_reader.SMWClient.__init__","title":"<code>__init__(base_url, http_client=None, api_path='api.php')</code>","text":"<p>Initialize the SMW client.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL of the MediaWiki installation (e.g., \"https://example.com/wiki/\").</p> required <code>http_client</code> <code>HTTPClient | None</code> <p>HTTP client instance. If None, uses default RequestsHTTPClient.</p> <code>None</code> <code>api_path</code> <code>str</code> <p>Path to the API endpoint (default: \"api.php\").</p> <code>'api.php'</code> Source code in <code>src/smw_reader/client.py</code> <pre><code>def __init__(\n    self,\n    base_url: str,\n    http_client: HTTPClient | None = None,\n    api_path: str = \"api.php\",\n) -&gt; None:\n    \"\"\"Initialize the SMW client.\n\n    Args:\n        base_url: Base URL of the MediaWiki installation (e.g., \"https://example.com/wiki/\").\n        http_client: HTTP client instance. If None, uses default RequestsHTTPClient.\n        api_path: Path to the API endpoint (default: \"api.php\").\n    \"\"\"\n    self.base_url = base_url.rstrip(\"/\") + \"/\"\n    self.api_url = urljoin(self.base_url, api_path)\n    self.http_client = http_client or RequestsHTTPClient()\n    self._endpoints: dict[str, APIEndpoint] = {}\n</code></pre>"},{"location":"reference/#smw_reader.SMWClient.get_endpoint","title":"<code>get_endpoint(name)</code>","text":"<p>Get a registered endpoint by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The endpoint name.</p> required <p>Returns:</p> Type Description <code>APIEndpoint</code> <p>The endpoint instance.</p> <p>Raises:</p> Type Description <code>SMWValidationError</code> <p>If the endpoint is not registered.</p> Source code in <code>src/smw_reader/client.py</code> <pre><code>def get_endpoint(self, name: str) -&gt; APIEndpoint:\n    \"\"\"Get a registered endpoint by name.\n\n    Args:\n        name: The endpoint name.\n\n    Returns:\n        The endpoint instance.\n\n    Raises:\n        SMWValidationError: If the endpoint is not registered.\n    \"\"\"\n    if name not in self._endpoints:\n        raise SMWValidationError(f\"Endpoint '{name}' is not registered\")\n    return self._endpoints[name]\n</code></pre>"},{"location":"reference/#smw_reader.SMWClient.make_request","title":"<code>make_request(action, params=None, method='GET')</code>","text":"<p>Make a request to the SMW API.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>The API action/module name.</p> required <code>params</code> <code>dict[str, Any] | None</code> <p>Additional parameters for the request.</p> <code>None</code> <code>method</code> <code>str</code> <p>HTTP method to use.</p> <code>'GET'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The API response as a dictionary.</p> <p>Raises:</p> Type Description <code>SMWAPIError</code> <p>If the API request fails.</p> Source code in <code>src/smw_reader/client.py</code> <pre><code>def make_request(self, action: str, params: dict[str, Any] | None = None, method: str = \"GET\") -&gt; dict[str, Any]:\n    \"\"\"Make a request to the SMW API.\n\n    Args:\n        action: The API action/module name.\n        params: Additional parameters for the request.\n        method: HTTP method to use.\n\n    Returns:\n        The API response as a dictionary.\n\n    Raises:\n        SMWAPIError: If the API request fails.\n    \"\"\"\n    # Prepare parameters\n    request_params = {\"action\": action, \"format\": \"json\"}\n    if params:\n        request_params.update(params)\n\n    try:\n        if method.upper() == \"GET\":\n            response = self.http_client.get(self.api_url, params=request_params)\n        elif method.upper() == \"POST\":\n            response = self.http_client.post(self.api_url, data=request_params)\n        else:\n            raise SMWValidationError(f\"Unsupported HTTP method: {method}\")\n\n        # Check for API errors\n        if \"error\" in response:\n            error_info = response[\"error\"]\n            raise SMWAPIError(\n                f\"API Error: {error_info.get('info', 'Unknown error')}\",\n                response_data=error_info,\n            )\n\n        return response\n\n    except SMWAPIError:\n        # Re-raise SMW API errors as-is\n        raise\n    except Exception as e:\n        # Wrap other exceptions\n        raise SMWAPIError(f\"Request failed: {e}\") from e\n</code></pre>"},{"location":"reference/#smw_reader.SMWClient.register_endpoint","title":"<code>register_endpoint(endpoint)</code>","text":"<p>Register an API endpoint with the client.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>APIEndpoint</code> <p>The endpoint instance to register.</p> required Source code in <code>src/smw_reader/client.py</code> <pre><code>def register_endpoint(self, endpoint: APIEndpoint) -&gt; None:\n    \"\"\"Register an API endpoint with the client.\n\n    Args:\n        endpoint: The endpoint instance to register.\n    \"\"\"\n    self._endpoints[endpoint.endpoint_name] = endpoint\n</code></pre>"},{"location":"reference/#smw_reader.SMWConnectionError","title":"<code>SMWConnectionError</code>","text":"<p>               Bases: <code>SMWAPIError</code></p> <p>Exception raised when there's a connection error to the SMW API.</p> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>class SMWConnectionError(SMWAPIError):\n    \"\"\"Exception raised when there's a connection error to the SMW API.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.SMWServerError","title":"<code>SMWServerError</code>","text":"<p>               Bases: <code>SMWAPIError</code></p> <p>Exception raised when the SMW server returns an error.</p> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>class SMWServerError(SMWAPIError):\n    \"\"\"Exception raised when the SMW server returns an error.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.SMWValidationError","title":"<code>SMWValidationError</code>","text":"<p>               Bases: <code>SMWAPIError</code></p> <p>Exception raised when request parameters are invalid.</p> Source code in <code>src/smw_reader/exceptions.py</code> <pre><code>class SMWValidationError(SMWAPIError):\n    \"\"\"Exception raised when request parameters are invalid.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#smw_reader.create_client","title":"<code>create_client(base_url, **kwargs)</code>","text":"<p>Create a configured SMW client with common endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL of the MediaWiki installation.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to SMWClient constructor.</p> <code>{}</code> <p>Returns:</p> Type Description <code>SMWClient</code> <p>Configured SMWClient instance with Ask endpoint registered.</p> Source code in <code>src/smw_reader/__init__.py</code> <pre><code>def create_client(base_url: str, **kwargs: Any) -&gt; SMWClient:\n    \"\"\"Create a configured SMW client with common endpoints.\n\n    Args:\n        base_url: Base URL of the MediaWiki installation.\n        **kwargs: Additional arguments passed to SMWClient constructor.\n\n    Returns:\n        Configured SMWClient instance with Ask endpoint registered.\n    \"\"\"\n    client = SMWClient(base_url, **kwargs)\n\n    # Register common endpoints\n    ask_endpoint = AskEndpoint(client)\n    client.register_endpoint(ask_endpoint)\n\n    return client\n</code></pre>"},{"location":"reference/#smw_reader.main","title":"<code>main()</code>","text":"<p>Main entry point for the CLI.</p> Source code in <code>src/smw_reader/__init__.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main entry point for the CLI.\"\"\"\n    print(\"SMW Reader - Semantic MediaWiki API Client\")\n    print(\"Use 'create_client()' to get started with the API.\")\n</code></pre>"}]}